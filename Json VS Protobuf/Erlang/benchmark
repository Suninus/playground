#!/usr/bin/env escript
%% -*- erlang -*-

usage() ->
    io:format("usage: ./benchmark pack   [LOG AMOUNT] [BENCHMARK TIMES]~n"),
    io:format("       ./benchmark unpack [BENCHMARK TIMES]~n"),
    halt(1).

setup() ->
    SelfPath = filename:dirname(escript:script_name()),
    EbinPath = filename:join([SelfPath, "ebin"]),
    DepsEbinPath = filelib:wildcard(filename:join([SelfPath, "deps/*/ebin"])),

    Paths = [EbinPath | DepsEbinPath],

    lists:foreach(fun(P) -> code:add_patha(P) end, Paths).


main(["pack", LogAmount, BenchmarkTimes]) ->
    [Amount, Times] =
    try
        [list_to_integer(LogAmount), list_to_integer(BenchmarkTimes)]
    catch
        _:_ ->
            usage(),
            [0, 0]
    end,

    setup(),
    pack_benchmark(Amount, Times);


main(["unpack", BenchmarkTimes]) ->
    Times =
    try
        list_to_integer(BenchmarkTimes)
    catch
        _:_ ->
            usage(),
            0
    end,

    setup(),
    unpack_benchmark(Times);


main(_) ->
    usage().


pack_benchmark(Amount, Times) ->
    json_vs_proto:setup(Amount),
    io:format("LogAmount = ~p~n", [Amount]),
    io:format("Protobuf Size     : ~p~n", [size(json_vs_proto:pack_pb(Amount))]),
    io:format("Json Size         : ~p~n", [size(json_vs_proto:pack_json(Amount))]),
    io:format("Json Gzip Size    : ~p~n~n", [size(json_vs_proto:pack_json_gzip(Amount))]),

    io:format("BenchmarkTimes = ~p~n", [Times]),
    io:format("Protobuf Seconds  : ~p~n", [pack_tc(pack_pb, Amount, Times)]),
    io:format("Json Seconds      : ~p~n", [pack_tc(pack_json, Amount, Times)]),
    io:format("Json Gzip Seconds : ~p~n", [pack_tc(pack_json_gzip, Amount, Times)]).


unpack_benchmark(Times) ->
    json_vs_proto:setup(),
    io:format("BenchmarkTimes = ~p~n", [Times]),
    io:format("Protobuf Seconds  : ~p~n", [unpack_tc(unpack_pb, Times)]),
    io:format("Json Seconds      : ~p~n", [unpack_tc(unpack_json, Times)]),
    io:format("Json Gzip Seconds : ~p~n", [unpack_tc(unpack_json_gzip, Times)]).


pack_tc(Func, Amount, Times) ->
    Args = [fun(_) -> json_vs_proto:Func(Amount) end, lists:seq(1, Times)],
    {Time, _} = timer:tc(lists, foreach, Args),
    Time / 1000000.


unpack_tc(Func, Times)->
    Args = [fun(_) -> json_vs_proto:Func() end, lists:seq(1, Times)],
    {Time, _} = timer:tc(lists, foreach, Args),
    Time / 1000000.
