%% Automatically generated, do not edit
%% Generated by gpb_compile version 3.17.11 on {{2015,4,25},{17,32,50}}
-module(protocol).

-export([encode_msg/1, encode_msg/2]).
-export([decode_msg/2]).
-export([merge_msgs/2]).
-export([verify_msg/1]).
-export([get_msg_defs/0]).
-export([get_msg_names/0]).
-export([get_enum_names/0]).
-export([find_msg_def/1, fetch_msg_def/1]).
-export([find_enum_def/1, fetch_enum_def/1]).
-export([enum_symbol_by_value/2, enum_value_by_symbol/2]).
-export([get_service_names/0]).
-export([get_service_def/1]).
-export([get_rpc_names/1]).
-export([find_rpc_def/2, fetch_rpc_def/2]).
-export([get_package_name/0]).
-export([gpb_version_as_string/0, gpb_version_as_list/0]).

-include("protocol.hrl").
-include("gpb.hrl").


encode_msg(Msg) -> encode_msg(Msg, []).


encode_msg(Msg, Opts) ->
    case proplists:get_bool(verify, Opts) of
      true -> verify_msg(Msg);
      false -> ok
    end,
    case Msg of
      #'Log'{} -> e_msg_Log(Msg);
      #'Person'{} -> e_msg_Person(Msg)
    end.


e_msg_Log(Msg) -> e_msg_Log(Msg, <<>>).


e_msg_Log(#'Log'{id = F1, content = F2, status = F3,
		 times = F4},
	  Bin) ->
    B1 = e_type_int32(F1, <<Bin/binary, 8>>),
    B2 = e_type_string(F2, <<B1/binary, 18>>),
    B3 = e_type_int32(F3, <<B2/binary, 24>>),
    e_type_int32(F4, <<B3/binary, 32>>).

e_msg_Person(Msg) -> e_msg_Person(Msg, <<>>).


e_msg_Person(#'Person'{id = F1, name = F2, tags = F3,
		       logs = F4},
	     Bin) ->
    B1 = e_type_int32(F1, <<Bin/binary, 8>>),
    B2 = e_type_string(F2, <<B1/binary, 18>>),
    B3 = if F3 == [] -> B2;
	    true -> e_field_Person_tags(F3, B2)
	 end,
    if F4 == [] -> B3;
       true -> e_field_Person_logs(F4, B3)
    end.

e_field_Person_tags([Elem | Rest], Bin) ->
    Bin2 = <<Bin/binary, 24>>,
    Bin3 = e_type_int32(Elem, Bin2),
    e_field_Person_tags(Rest, Bin3);
e_field_Person_tags([], Bin) -> Bin.

e_mfield_Person_logs(Msg, Bin) ->
    SubBin = e_msg_Log(Msg, <<>>),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

e_field_Person_logs([Elem | Rest], Bin) ->
    Bin2 = <<Bin/binary, 34>>,
    Bin3 = e_mfield_Person_logs(Elem, Bin2),
    e_field_Person_logs(Rest, Bin3);
e_field_Person_logs([], Bin) -> Bin.

e_type_int32(Value, Bin)
    when 0 =< Value, Value =< 127 ->
    <<Bin/binary, Value>>;
e_type_int32(Value, Bin) ->
    <<N:32/unsigned-native>> = <<Value:32/signed-native>>,
    e_varint(N, Bin).

e_type_string(S, Bin) ->
    Utf8 = unicode:characters_to_binary(S),
    Bin2 = e_varint(byte_size(Utf8), Bin),
    <<Bin2/binary, Utf8/binary>>.

e_varint(N, Bin) when N =< 127 -> <<Bin/binary, N>>;
e_varint(N, Bin) ->
    Bin2 = <<Bin/binary, (N band 127 bor 128)>>,
    e_varint(N bsr 7, Bin2).



decode_msg(Bin, MsgName) when is_binary(Bin) ->
    case MsgName of
      'Log' -> d_msg_Log(Bin);
      'Person' -> d_msg_Person(Bin)
    end.



d_msg_Log(Bin) ->
    dfp_read_field_def_Log(Bin, 0, 0, undefined, undefined,
			   undefined, undefined).

dfp_read_field_def_Log(<<8, Rest/binary>>, Z1, Z2, F1,
		       F2, F3, F4) ->
    d_field_Log_id(Rest, Z1, Z2, F1, F2, F3, F4);
dfp_read_field_def_Log(<<18, Rest/binary>>, Z1, Z2, F1,
		       F2, F3, F4) ->
    d_field_Log_content(Rest, Z1, Z2, F1, F2, F3, F4);
dfp_read_field_def_Log(<<24, Rest/binary>>, Z1, Z2, F1,
		       F2, F3, F4) ->
    d_field_Log_status(Rest, Z1, Z2, F1, F2, F3, F4);
dfp_read_field_def_Log(<<32, Rest/binary>>, Z1, Z2, F1,
		       F2, F3, F4) ->
    d_field_Log_times(Rest, Z1, Z2, F1, F2, F3, F4);
dfp_read_field_def_Log(<<>>, 0, 0, F1, F2, F3, F4) ->
    #'Log'{id = F1, content = F2, status = F3, times = F4};
dfp_read_field_def_Log(Other, Z1, Z2, F1, F2, F3, F4) ->
    dg_read_field_def_Log(Other, Z1, Z2, F1, F2, F3, F4).

dg_read_field_def_Log(<<1:1, X:7, Rest/binary>>, N, Acc,
		      F1, F2, F3, F4)
    when N < 32 - 7 ->
    dg_read_field_def_Log(Rest, N + 7, X bsl N + Acc, F1,
			  F2, F3, F4);
dg_read_field_def_Log(<<0:1, X:7, Rest/binary>>, N, Acc,
		      F1, F2, F3, F4) ->
    Key = X bsl N + Acc,
    case Key of
      8 -> d_field_Log_id(Rest, 0, 0, F1, F2, F3, F4);
      18 -> d_field_Log_content(Rest, 0, 0, F1, F2, F3, F4);
      24 -> d_field_Log_status(Rest, 0, 0, F1, F2, F3, F4);
      32 -> d_field_Log_times(Rest, 0, 0, F1, F2, F3, F4);
      _ ->
	  case Key band 7 of
	    0 -> skip_varint_Log(Rest, 0, 0, F1, F2, F3, F4);
	    1 -> skip_64_Log(Rest, 0, 0, F1, F2, F3, F4);
	    2 ->
		skip_length_delimited_Log(Rest, 0, 0, F1, F2, F3, F4);
	    5 -> skip_32_Log(Rest, 0, 0, F1, F2, F3, F4)
	  end
    end;
dg_read_field_def_Log(<<>>, 0, 0, F1, F2, F3, F4) ->
    #'Log'{id = F1, content = F2, status = F3, times = F4}.

d_field_Log_id(<<1:1, X:7, Rest/binary>>, N, Acc, F1,
	       F2, F3, F4)
    when N < 57 ->
    d_field_Log_id(Rest, N + 7, X bsl N + Acc, F1, F2, F3,
		   F4);
d_field_Log_id(<<0:1, X:7, Rest/binary>>, N, Acc, _, F2,
	       F3, F4) ->
    <<NewFValue:32/signed-native>> = <<(X bsl N +
					  Acc):32/unsigned-native>>,
    dfp_read_field_def_Log(Rest, 0, 0, NewFValue, F2, F3,
			   F4).


d_field_Log_content(<<1:1, X:7, Rest/binary>>, N, Acc,
		    F1, F2, F3, F4)
    when N < 57 ->
    d_field_Log_content(Rest, N + 7, X bsl N + Acc, F1, F2,
			F3, F4);
d_field_Log_content(<<0:1, X:7, Rest/binary>>, N, Acc,
		    F1, _, F3, F4) ->
    Len = X bsl N + Acc,
    <<Bytes:Len/binary, Rest2/binary>> = Rest,
    NewFValue = binary:copy(Bytes),
    dfp_read_field_def_Log(Rest2, 0, 0, F1, NewFValue, F3,
			   F4).


d_field_Log_status(<<1:1, X:7, Rest/binary>>, N, Acc,
		   F1, F2, F3, F4)
    when N < 57 ->
    d_field_Log_status(Rest, N + 7, X bsl N + Acc, F1, F2,
		       F3, F4);
d_field_Log_status(<<0:1, X:7, Rest/binary>>, N, Acc,
		   F1, F2, _, F4) ->
    <<NewFValue:32/signed-native>> = <<(X bsl N +
					  Acc):32/unsigned-native>>,
    dfp_read_field_def_Log(Rest, 0, 0, F1, F2, NewFValue,
			   F4).


d_field_Log_times(<<1:1, X:7, Rest/binary>>, N, Acc, F1,
		  F2, F3, F4)
    when N < 57 ->
    d_field_Log_times(Rest, N + 7, X bsl N + Acc, F1, F2,
		      F3, F4);
d_field_Log_times(<<0:1, X:7, Rest/binary>>, N, Acc, F1,
		  F2, F3, _) ->
    <<NewFValue:32/signed-native>> = <<(X bsl N +
					  Acc):32/unsigned-native>>,
    dfp_read_field_def_Log(Rest, 0, 0, F1, F2, F3,
			   NewFValue).


skip_varint_Log(<<1:1, _:7, Rest/binary>>, Z1, Z2, F1,
		F2, F3, F4) ->
    skip_varint_Log(Rest, Z1, Z2, F1, F2, F3, F4);
skip_varint_Log(<<0:1, _:7, Rest/binary>>, Z1, Z2, F1,
		F2, F3, F4) ->
    dfp_read_field_def_Log(Rest, Z1, Z2, F1, F2, F3, F4).


skip_length_delimited_Log(<<1:1, X:7, Rest/binary>>, N,
			  Acc, F1, F2, F3, F4)
    when N < 57 ->
    skip_length_delimited_Log(Rest, N + 7, X bsl N + Acc,
			      F1, F2, F3, F4);
skip_length_delimited_Log(<<0:1, X:7, Rest/binary>>, N,
			  Acc, F1, F2, F3, F4) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_Log(Rest2, 0, 0, F1, F2, F3, F4).


skip_32_Log(<<_:32, Rest/binary>>, Z1, Z2, F1, F2, F3,
	    F4) ->
    dfp_read_field_def_Log(Rest, Z1, Z2, F1, F2, F3, F4).


skip_64_Log(<<_:64, Rest/binary>>, Z1, Z2, F1, F2, F3,
	    F4) ->
    dfp_read_field_def_Log(Rest, Z1, Z2, F1, F2, F3, F4).


d_msg_Person(Bin) ->
    dfp_read_field_def_Person(Bin, 0, 0, undefined,
			      undefined, [], []).

dfp_read_field_def_Person(<<8, Rest/binary>>, Z1, Z2,
			  F1, F2, F3, F4) ->
    d_field_Person_id(Rest, Z1, Z2, F1, F2, F3, F4);
dfp_read_field_def_Person(<<18, Rest/binary>>, Z1, Z2,
			  F1, F2, F3, F4) ->
    d_field_Person_name(Rest, Z1, Z2, F1, F2, F3, F4);
dfp_read_field_def_Person(<<24, Rest/binary>>, Z1, Z2,
			  F1, F2, F3, F4) ->
    d_field_Person_tags(Rest, Z1, Z2, F1, F2, F3, F4);
dfp_read_field_def_Person(<<34, Rest/binary>>, Z1, Z2,
			  F1, F2, F3, F4) ->
    d_field_Person_logs(Rest, Z1, Z2, F1, F2, F3, F4);
dfp_read_field_def_Person(<<>>, 0, 0, F1, F2, F3, F4) ->
    #'Person'{id = F1, name = F2, tags = lists:reverse(F3),
	      logs = lists:reverse(F4)};
dfp_read_field_def_Person(Other, Z1, Z2, F1, F2, F3,
			  F4) ->
    dg_read_field_def_Person(Other, Z1, Z2, F1, F2, F3, F4).

dg_read_field_def_Person(<<1:1, X:7, Rest/binary>>, N,
			 Acc, F1, F2, F3, F4)
    when N < 32 - 7 ->
    dg_read_field_def_Person(Rest, N + 7, X bsl N + Acc, F1,
			     F2, F3, F4);
dg_read_field_def_Person(<<0:1, X:7, Rest/binary>>, N,
			 Acc, F1, F2, F3, F4) ->
    Key = X bsl N + Acc,
    case Key of
      8 -> d_field_Person_id(Rest, 0, 0, F1, F2, F3, F4);
      18 -> d_field_Person_name(Rest, 0, 0, F1, F2, F3, F4);
      24 -> d_field_Person_tags(Rest, 0, 0, F1, F2, F3, F4);
      34 -> d_field_Person_logs(Rest, 0, 0, F1, F2, F3, F4);
      _ ->
	  case Key band 7 of
	    0 -> skip_varint_Person(Rest, 0, 0, F1, F2, F3, F4);
	    1 -> skip_64_Person(Rest, 0, 0, F1, F2, F3, F4);
	    2 ->
		skip_length_delimited_Person(Rest, 0, 0, F1, F2, F3,
					     F4);
	    5 -> skip_32_Person(Rest, 0, 0, F1, F2, F3, F4)
	  end
    end;
dg_read_field_def_Person(<<>>, 0, 0, F1, F2, F3, F4) ->
    #'Person'{id = F1, name = F2, tags = lists:reverse(F3),
	      logs = lists:reverse(F4)}.

d_field_Person_id(<<1:1, X:7, Rest/binary>>, N, Acc, F1,
		  F2, F3, F4)
    when N < 57 ->
    d_field_Person_id(Rest, N + 7, X bsl N + Acc, F1, F2,
		      F3, F4);
d_field_Person_id(<<0:1, X:7, Rest/binary>>, N, Acc, _,
		  F2, F3, F4) ->
    <<NewFValue:32/signed-native>> = <<(X bsl N +
					  Acc):32/unsigned-native>>,
    dfp_read_field_def_Person(Rest, 0, 0, NewFValue, F2, F3,
			      F4).


d_field_Person_name(<<1:1, X:7, Rest/binary>>, N, Acc,
		    F1, F2, F3, F4)
    when N < 57 ->
    d_field_Person_name(Rest, N + 7, X bsl N + Acc, F1, F2,
			F3, F4);
d_field_Person_name(<<0:1, X:7, Rest/binary>>, N, Acc,
		    F1, _, F3, F4) ->
    Len = X bsl N + Acc,
    <<Bytes:Len/binary, Rest2/binary>> = Rest,
    NewFValue = binary:copy(Bytes),
    dfp_read_field_def_Person(Rest2, 0, 0, F1, NewFValue,
			      F3, F4).


d_field_Person_tags(<<1:1, X:7, Rest/binary>>, N, Acc,
		    F1, F2, F3, F4)
    when N < 57 ->
    d_field_Person_tags(Rest, N + 7, X bsl N + Acc, F1, F2,
			F3, F4);
d_field_Person_tags(<<0:1, X:7, Rest/binary>>, N, Acc,
		    F1, F2, F3, F4) ->
    <<NewFValue:32/signed-native>> = <<(X bsl N +
					  Acc):32/unsigned-native>>,
    dfp_read_field_def_Person(Rest, 0, 0, F1, F2,
			      [NewFValue | F3], F4).


d_field_Person_logs(<<1:1, X:7, Rest/binary>>, N, Acc,
		    F1, F2, F3, F4)
    when N < 57 ->
    d_field_Person_logs(Rest, N + 7, X bsl N + Acc, F1, F2,
			F3, F4);
d_field_Person_logs(<<0:1, X:7, Rest/binary>>, N, Acc,
		    F1, F2, F3, F4) ->
    Len = X bsl N + Acc,
    <<Bs:Len/binary, Rest2/binary>> = Rest,
    NewFValue = decode_msg(Bs, 'Log'),
    dfp_read_field_def_Person(Rest2, 0, 0, F1, F2, F3,
			      [NewFValue | F4]).


skip_varint_Person(<<1:1, _:7, Rest/binary>>, Z1, Z2,
		   F1, F2, F3, F4) ->
    skip_varint_Person(Rest, Z1, Z2, F1, F2, F3, F4);
skip_varint_Person(<<0:1, _:7, Rest/binary>>, Z1, Z2,
		   F1, F2, F3, F4) ->
    dfp_read_field_def_Person(Rest, Z1, Z2, F1, F2, F3, F4).


skip_length_delimited_Person(<<1:1, X:7, Rest/binary>>,
			     N, Acc, F1, F2, F3, F4)
    when N < 57 ->
    skip_length_delimited_Person(Rest, N + 7, X bsl N + Acc,
				 F1, F2, F3, F4);
skip_length_delimited_Person(<<0:1, X:7, Rest/binary>>,
			     N, Acc, F1, F2, F3, F4) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_Person(Rest2, 0, 0, F1, F2, F3, F4).


skip_32_Person(<<_:32, Rest/binary>>, Z1, Z2, F1, F2,
	       F3, F4) ->
    dfp_read_field_def_Person(Rest, Z1, Z2, F1, F2, F3, F4).


skip_64_Person(<<_:64, Rest/binary>>, Z1, Z2, F1, F2,
	       F3, F4) ->
    dfp_read_field_def_Person(Rest, Z1, Z2, F1, F2, F3, F4).




merge_msgs(Prev, New)
    when element(1, Prev) =:= element(1, New) ->
    case Prev of
      #'Log'{} -> merge_msg_Log(Prev, New);
      #'Person'{} -> merge_msg_Person(Prev, New)
    end.

merge_msg_Log(#'Log'{id = PFid, content = PFcontent,
		     status = PFstatus, times = PFtimes},
	      #'Log'{id = NFid, content = NFcontent,
		     status = NFstatus, times = NFtimes}) ->
    #'Log'{id =
	       if NFid =:= undefined -> PFid;
		  true -> NFid
	       end,
	   content =
	       if NFcontent =:= undefined -> PFcontent;
		  true -> NFcontent
	       end,
	   status =
	       if NFstatus =:= undefined -> PFstatus;
		  true -> NFstatus
	       end,
	   times =
	       if NFtimes =:= undefined -> PFtimes;
		  true -> NFtimes
	       end}.

merge_msg_Person(#'Person'{id = PFid, name = PFname,
			   tags = PFtags, logs = PFlogs},
		 #'Person'{id = NFid, name = NFname, tags = NFtags,
			   logs = NFlogs}) ->
    #'Person'{id =
		  if NFid =:= undefined -> PFid;
		     true -> NFid
		  end,
	      name =
		  if NFname =:= undefined -> PFname;
		     true -> NFname
		  end,
	      tags = PFtags ++ NFtags, logs = PFlogs ++ NFlogs}.



verify_msg(Msg) ->
    case Msg of
      #'Log'{} -> v_msg_Log(Msg, ['Log']);
      #'Person'{} -> v_msg_Person(Msg, ['Person']);
      _ -> mk_type_error(not_a_known_message, Msg, [])
    end.


v_msg_Log(#'Log'{id = F1, content = F2, status = F3,
		 times = F4},
	  Path) ->
    v_type_int32(F1, [id | Path]),
    v_type_string(F2, [content | Path]),
    v_type_int32(F3, [status | Path]),
    v_type_int32(F4, [times | Path]),
    ok;
v_msg_Log(X, Path) ->
    mk_type_error({expected_msg, 'Log'}, X, Path).

v_msg_Person(#'Person'{id = F1, name = F2, tags = F3,
		       logs = F4},
	     Path) ->
    v_type_int32(F1, [id | Path]),
    v_type_string(F2, [name | Path]),
    if is_list(F3) ->
	   [v_type_int32(Elem, [tags | Path]) || Elem <- F3];
       true ->
	   mk_type_error({invalid_list_of, int32}, F3, Path)
    end,
    if is_list(F4) ->
	   [v_msg_Log(Elem, [logs | Path]) || Elem <- F4];
       true ->
	   mk_type_error({invalid_list_of, {msg, 'Log'}}, F4, Path)
    end,
    ok.

v_type_int32(N, _Path)
    when -2147483648 =< N, N =< 2147483647 ->
    ok;
v_type_int32(N, Path) when is_integer(N) ->
    mk_type_error({value_out_of_range, int32, signed, 32},
		  N, Path);
v_type_int32(X, Path) ->
    mk_type_error({bad_integer, int32, signed, 32}, X,
		  Path).

v_type_string(S, Path) when is_list(S) ->
    try unicode:characters_to_binary(S), ok catch
      error:badarg ->
	  mk_type_error(bad_unicode_string, S, Path)
    end;
v_type_string(X, Path) ->
    mk_type_error(bad_unicode_string, X, Path).

mk_type_error(Error, ValueSeen, Path) ->
    Path2 = prettify_path(Path),
    erlang:error({gpb_type_error,
		  {Error, [{value, ValueSeen}, {path, Path2}]}}).


prettify_path([]) -> top_level;
prettify_path(PathR) ->
    list_to_atom(string:join(lists:map(fun atom_to_list/1,
				       lists:reverse(PathR)),
			     ".")).



get_msg_defs() ->
    [{{msg, 'Log'},
      [#field{name = id, fnum = 1, rnum = 2, type = int32,
	      occurrence = required, opts = []},
       #field{name = content, fnum = 2, rnum = 3,
	      type = string, occurrence = required, opts = []},
       #field{name = status, fnum = 3, rnum = 4, type = int32,
	      occurrence = required, opts = []},
       #field{name = times, fnum = 4, rnum = 5, type = int32,
	      occurrence = required, opts = []}]},
     {{msg, 'Person'},
      [#field{name = id, fnum = 1, rnum = 2, type = int32,
	      occurrence = required, opts = []},
       #field{name = name, fnum = 2, rnum = 3, type = string,
	      occurrence = required, opts = []},
       #field{name = tags, fnum = 3, rnum = 4, type = int32,
	      occurrence = repeated, opts = []},
       #field{name = logs, fnum = 4, rnum = 5,
	      type = {msg, 'Log'}, occurrence = repeated,
	      opts = []}]}].


get_msg_names() -> ['Log', 'Person'].


get_enum_names() -> [].


fetch_msg_def(MsgName) ->
    case find_msg_def(MsgName) of
      Fs when is_list(Fs) -> Fs;
      error -> erlang:error({no_such_msg, MsgName})
    end.


fetch_enum_def(EnumName) ->
    erlang:error({no_such_enum, EnumName}).


find_msg_def('Log') ->
    [#field{name = id, fnum = 1, rnum = 2, type = int32,
	    occurrence = required, opts = []},
     #field{name = content, fnum = 2, rnum = 3,
	    type = string, occurrence = required, opts = []},
     #field{name = status, fnum = 3, rnum = 4, type = int32,
	    occurrence = required, opts = []},
     #field{name = times, fnum = 4, rnum = 5, type = int32,
	    occurrence = required, opts = []}];
find_msg_def('Person') ->
    [#field{name = id, fnum = 1, rnum = 2, type = int32,
	    occurrence = required, opts = []},
     #field{name = name, fnum = 2, rnum = 3, type = string,
	    occurrence = required, opts = []},
     #field{name = tags, fnum = 3, rnum = 4, type = int32,
	    occurrence = repeated, opts = []},
     #field{name = logs, fnum = 4, rnum = 5,
	    type = {msg, 'Log'}, occurrence = repeated, opts = []}];
find_msg_def(_) -> error.


find_enum_def(_) -> error.


enum_symbol_by_value(E, V) ->
    erlang:error({no_enum_defs, E, V}).


enum_value_by_symbol(E, V) ->
    erlang:error({no_enum_defs, E, V}).



get_service_names() -> [].


get_service_def(_) -> error.


get_rpc_names(_) -> error.


find_rpc_def(_, _) -> error.



fetch_rpc_def(ServiceName, RpcName) ->
    erlang:error({no_such_rpc, ServiceName, RpcName}).


get_package_name() -> undefined.



gpb_version_as_string() ->
    "3.17.11".

gpb_version_as_list() ->
    [3,17,11].
